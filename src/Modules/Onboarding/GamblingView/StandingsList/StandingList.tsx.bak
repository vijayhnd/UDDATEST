import React from "react";
import AppValidationComponent, { AppValidationComponentState, AppValidationComponentProps } from "../../../../Util/AppValidationComponent";
import { View, Text, Image, FlatList, AsyncStorage,TouchableOpacity,ImageBackground } from "react-native";
import styles from './styles';
import Container from '../../../../Components/Container';
import UpdateProfileResponse from "../../../../Services/Profile/UpdateProfileResponse";
import Application from "../../../../Entities/Application";
import RouterBuilder from "../../../../Router";
import AppScreens from "../../../../Util/AppScreens";
import { connect } from 'react-redux';
import { ISubheaderListener } from "../../../../Components/CustomComponents/SubHeader/SubHeader";
import { MenuIconListener } from "../../../../Components/Icons/MenuIcon/MenuIcon";
import { ServiceRequestStatus } from "../../../../ReduxStore/ServiceState";
import { GlobalAppState } from "../../../../ReduxStore";
import { UDDAError } from "../../../../Entities";
import GetProfileResponse from "../../../../Services/Profile/GetProfileResponse";
import ProgressLoader from 'rn-progress-loader';
import LogoutUtill from "../../../../Util/LogoutUtill";
import UrlService from '../../../../Services/Core/ServiceURI'
import { widthPercentageToDP as wp, heightPercentageToDP as hp, heightPercentageToDP } from 'react-native-responsive-screen';
import DetailComponent from "../../../../Components/CustomComponents/Free2Play/Freetoplaydetail";

const ProfilePageContent = {
    key: 'somethun',
    page_title: 'PROFILE'
}

interface G_StandingListProps extends AppValidationComponentProps {
    updateProfileRequestStatus?: ServiceRequestStatus
    updateProfileResponse?: UpdateProfileResponse
    updateProfileError?: UDDAError
    getProfileRequestStatus?: ServiceRequestStatus
    getProfileResponse?: GetProfileResponse
    getProfileError?: UDDAError
    serviceKey?: string
    listeners?: any
}

interface ProflieViewState extends AppValidationComponentState {
    contentInsetBottom: any;
    dialogVisible: boolean,
    OrderSummaryDialog: boolean,
    JoinNowSelected: any,
    Dialog: boolean,
    StandlingList: any,
    IsSelected: any,
    loader: any,
    RegisterDate: any,
    ChallengeName: any,
    EndDate: any
    Nodata: any
    contestdetail: any
    contestdetailid: any
    contestid: any
    responsedata: any
    contesttype: any
}


const bottom_initial = 0;

class G_StandingList extends AppValidationComponent<G_StandingListProps, ProflieViewState>
    implements MenuIconListener, ISubheaderListener {

    private serviceRequestInProgress = false
    private authorisationToken = Application.sharedApplication().user!.authenticationToken;

    constructor(props: G_StandingListProps) {
        super(props);
        this.state = {
            contentInsetBottom: bottom_initial,
            dialogVisible: false,
            OrderSummaryDialog: false,
            JoinNowSelected: '',
            Dialog: false,
            StandlingList: '',
            IsSelected: '',
            loader: false,

            RegisterDate: '',
            ChallengeName: '',
            EndDate: '',
            Nodata: '',
            contestdetail: false,
            contestdetailid: '',
            contestid: '',
            responsedata: {},
            contesttype: '',
        }
    }


    componentDidMount() {
        AsyncStorage.getItem('contest_Type').then((data) => {
            this.setState({contesttype:data})


            if(data != 'free_to_play_contest')
            { 
                AsyncStorage.getItem('Standing_Type').then((data) => {
                // this.setState({contestid:data})
                 if(data == "1")
                 {
                     this.callMethodPrivate();
                 }
                 else{
                     this.callMethod();
                 }
             });
         }else{
             this.callMethodf2p();
         }
          
        });
       
        // this.callMethod();
    }



    // -------------------------------------------------- API Calling ------------------------------------------------------
    callMethod() {
        
        this.setState({ loader: true }); 

        AsyncStorage.getItem('Standing_contest_id').then((data) => {
            var params: any = {
                'contest_id': data,
            };

            var formData = new FormData();

            for (var k in params) {
                formData.append(k, params[k]);
            }
            console.log('Standing_contest input' + JSON.stringify(params));

            fetch(UrlService.CONSTURI +'index.php/'+ UrlService.APIVERSION3 +'/apiGaming/contest_standing_list', {
                method: 'POST',
                headers: {
                 //   'Content-Type': 'application/x-www-form-urlencoded', //garima
                    'authorisation': this.authorisationToken
                },
                body: formData,

            }).then((response) => response.json())
                .then((responseJson) => {
                    this.setState({ loader: false });

                    console.log('Standing_contest Data ' + JSON.stringify(responseJson));

                    this.setState({ StandlingList: responseJson.data.StandlingList });
                    this.setState({ responsedata: responseJson.data });
                    this.setState({ ChallengeName: responseJson.data.ChallengeName });
                    this.setState({ RegisterDate: responseJson.data.RegisterDate });
                    this.setState({ EndDate: responseJson.data.EndDate });
                    if (responseJson.message == "Access Expired.") {
                        // AlertUtil.show("Session Expired ! Please login again");
                        console.log("Footer comp ---->"+responseJson.message);
                        LogoutUtill.logoutButtonPressed(this.props);
                       }
                })
                .catch(error => {
                    this.setState({ loader: false });
                    console.log(error);
                })
        })
    }


    callMethodf2p() {
        
        this.setState({ loader: true }); 

        AsyncStorage.getItem('Standing_contest_id').then((data) => {
            this.setState({contestid:data})
            var params: any = {
                'contest_id': data,
            };

            var formData = new FormData();

            for (var k in params) {
                formData.append(k, params[k]);
            }
            console.log('Standing_contest input' + JSON.stringify(params));

            fetch(UrlService.CONSTURI +'index.php/'+ UrlService.APIVERSION3 +'/apiGaming/free_to_play_contest_standing_list', {
                method: 'POST',
                headers: {
                 //   'Content-Type': 'application/x-www-form-urlencoded', //garima
                    'authorisation': this.authorisationToken
                },
                body: formData,

            }).then((response) => response.json())
                .then((responseJson) => {
                    this.setState({ loader: false });

                    console.log('free_to_play_contest_standing_list Data ' + JSON.stringify(responseJson));

                    this.setState({ StandlingList: responseJson.data.StandlingList });
                    this.setState({ responsedata: responseJson.data });
                    this.setState({ ChallengeName: responseJson.data.ChallengeName });
                    this.setState({ RegisterDate: responseJson.data.RegisterDate });
                    this.setState({ EndDate: responseJson.data.EndDate });
                    if (responseJson.message == "Access Expired.") {
                        // AlertUtil.show("Session Expired ! Please login again");
                        console.log("Footer comp ---->"+responseJson.message);
                        LogoutUtill.logoutButtonPressed(this.props);
                       }
                })
                .catch(error => {
                    this.setState({ loader: false });
                    console.log(error);
                })
        })
    }


    callMethodPrivate() {
        
        this.setState({ loader: true }); 

        AsyncStorage.getItem('Standing_contest_id').then((data) => {
            var params: any = {
                'private_contest_id': data,
            };

            var formData = new FormData();

            for (var k in params) {
                formData.append(k, params[k]);
            }
            console.log('Standing_contest input' + JSON.stringify(params));

            fetch(UrlService.CONSTURI +'index.php/'+ UrlService.APIVERSION3 +'/apiGaming/private_contest_standing_list', {
                method: 'POST',
                headers: {
                   // 'Content-Type': 'application/x-www-form-urlencoded',
                    'authorisation': this.authorisationToken
                },
                body: formData,

            }).then((response) => response.json())
                .then((responseJson) => {
                    this.setState({ loader: false });

                    console.log('Standing_contest Data ' + JSON.stringify(responseJson));

                    this.setState({ StandlingList: responseJson.data.StandlingList });
                    this.setState({ responsedata: responseJson.data });
                    this.setState({ ChallengeName: responseJson.data.ChallengeName });
                    this.setState({ RegisterDate: responseJson.data.RegisterDate });
                    this.setState({ EndDate: responseJson.data.EndDate });
                    if (responseJson.message == "Access Expired.") {
                        // AlertUtil.show("Session Expired ! Please login again");
                        console.log("Footer comp ---->"+responseJson.message);
                        LogoutUtill.logoutButtonPressed(this.props);
                       }
                })
                .catch(error => {
                    this.setState({ loader: false });
                    console.log(error);
                })
        })
    }



    iconDidTapped() {
        this.props.navigation!.navigate(AppScreens.G_Settings_2_View);
    }

    LogoiconDidTapped() {
        RouterBuilder.replaceRouteTo(AppScreens.G_DashboardView, this.props)
    }

    accountNameTapped() {
        RouterBuilder.replaceRouteTo(AppScreens.G_ProfileView, this.props)
    }

    openPlaysTapped() {
        RouterBuilder.replaceRouteTo(AppScreens.G_UddaContests, this.props)
    }

    coveredPlaysTapped() {
        RouterBuilder.replaceRouteTo(AppScreens.G_GamingBetView, this.props)
    }

    availableBalanceTapped() {
    }


    logoutButtonPressed() {
        Application.sharedApplication().logout()
        RouterBuilder.resetRouteTo(AppScreens.OnboardingStack, this.props)
    }


    IsSelectedMore(item: any, index: any) {

        for (let i = 0; i < this.state.StandlingList.length; i++) {
            if (i == index) {
                this.state.StandlingList[i].IsSelected = !this.state.StandlingList[i].IsSelected
            }
            else {
                this.state.StandlingList[i].IsSelected = false

            }
        }
        this.setState({ IsSelected: item })
    }

    closeDetailModal() {
        this.setState({ contestdetail: !this.state.contestdetail });
      }
      
      openDetailmodel(value:any){
      this.setState({ contestdetailid:value});
      this.setState({ contestdetail: !this.state.contestdetail });
      }

      goinfo() {
        this.props.navigation!.navigate(AppScreens.G_InfochartView, this.props)
      }

    render() {
        return (
            <Container title={ProfilePageContent.page_title}
                isHeader={true}
                isSubHeader={true}
                isTitle={false}
                showIndicator={this.serviceRequestInProgress}
                menuIconListener={this}
                LogoIconListener={this}
                accountNameListener={this}
                availableBalanceListener={this}
                openPlaysListener={this}
                coveredPlaysListener={this}
                isSetting={false}>


                <ProgressLoader
                    visible={this.state.loader}
                    isModal={true} isHUD={true}
                    hudColor={"#68bcbc"}
                    color={"#FFFFFF"} />





                <View style={styles.mainContent}>
                    <View style={{ marginTop: 20, justifyContent: 'center', alignItems: 'center' }}>
                        {/* <Text style={styles.NFL_Text_Style}>{this.state.ChallengeName}</Text> */}

                       {this.state.contesttype =='free_to_play_contest'? <View style={{ width: '100%', justifyContent: 'center', alignItems: 'center', marginTop: 10 }}>
              <View style={{borderColor: 'black', borderWidth: 1,width:'90%',flexDirection:'row'}}>
              <View style={{  width: '85%', justifyContent: 'center', alignItems: 'center', padding: 5 }}>
                <Text style={{ color: 'black', fontFamily: 'Montserrat-Bold', fontSize: hp(1.7),marginLeft:20 }}>{this.state.ChallengeName}</Text>
                <Text style={{ color: 'black', fontFamily: 'Montserrat-Medium', fontSize: hp(1.2),marginLeft:20 }}>{this.state.RegisterDate}-{this.state.EndDate}</Text>
                </View>
               <View style={{width:'15%',bottom:5}}>
                  <TouchableOpacity onPress={()=>{
                       this.openDetailmodel(this.state.contestid)
                      }} style={{ width: '100%',marginLeft:5 }}>
                <ImageBackground source={require('../../../../images/free-to-play-corner-bg.png')}
                                resizeMode='stretch'
                                style={{ width: '100%', height: 40 }}
                                >
                                 
                                </ImageBackground>
                                </TouchableOpacity>
                </View>
              </View>
              
            </View>:<Text style={styles.NFL_Text_Style}>{this.state.ChallengeName}</Text>}



                        <Text style={styles.Current_Text_Style}>CURRENT STANDINGS</Text>
                        <Text style={styles.Date_Text_Style}>{this.state.RegisterDate}-{this.state.EndDate}</Text>
                    </View>







                    {this.state.StandlingList.length > 0 ?
                        <View style={styles.Flatlist_Style}>
                            <FlatList
                                data={this.state.StandlingList}
                                extraData={this.state}
                                keyExtractor={(item: any, index: any) => index.toString()}
                                renderItem={({ item, index }: any) => {
                                    var subindex = index;
                                    return (
                                        <View>
                                            <View style={styles.Flatlist_Main_Container}>
                                                <View style={[styles.Detail_Container, { backgroundColor: item.IsSelected == true ? '#f0f0f0' : 'white' }]}>
                                                    <View style={{ borderColor: '#666', borderRadius: 100, borderWidth: 1 }}>
                                                        <Image
                                                            style={{ width: 40, height: 40, padding: 5 }}
                                                            source={{ uri: item.Image }} >
                                                        </Image>
                                                    </View>
                                                </View>
                                                <View style={[styles.Name_Container, { backgroundColor: item.IsSelected == true ? '#f0f0f0' : 'white' }]}>
                                                    <Text style={styles.Count_Style}>{item.Id}. <Text style={styles.Name_Style}> {item.Name}</Text>
                                                    </Text>
                                                </View>
                                                <View style={[styles.Price_Container, { backgroundColor: item.IsSelected == true ? '#68bcbc' : '#d2ebeb' }]}>
                                                    <Text style={[styles.Price_Text, { color: item.IsSelected == true ? 'white' : '#68bcbc', }]}>{item.Price}</Text>
                                                </View>
                                            </View>

                                            {item.IsSelected == true ?
                                                <View>
                                                    <View style={styles.Line}></View>
                                                    <FlatList
                                                        data={item.TeamContest}
                                                        extraData={this.state}
                                                        keyExtractor={(item: any, index: any) => index.toString()}
                                                        renderItem={({ item, index }: any) => {
                                                            var subindex = index;
                                                            return (
                                                                <View>
                                                                    <View style={{ width: '100%', flexDirection: 'row' }}>
                                                                        <View style={{ width: '75%', backgroundColor: '#f0f0f0', height: 55, justifyContent: 'center' }}>
                                                                            <View style={{ marginLeft: 20, }}>
                                                                                <Text style={styles.Date_Text}>{item.Date}</Text>
                                                                                <View style={{ flexDirection: 'row' }}>
                                                                                    <Text style={item.away.iswin == true ? styles.Team2_Text : styles.Team1_Text}>{item.away.title}</Text>
                                                                                    <Text style={styles.Verses_Text}>v</Text>
                                                                                    <Text style={item.home.iswin == true ? styles.Team2_Text : styles.Team1_Text}>{item.home.title}</Text>
                                                                                </View>
                                                                            </View>
                                                                        </View>
                                                                        <View style={styles.Team_Price_Container}>
                                                                            <Text style={styles.Team_Price_Text}>{item.Price}</Text>
                                                                        </View>
                                                                    </View>
                                                                    <View style={styles.Line}>
                                                                    </View>
                                                                </View>
                                                            )
                                                        }} />
                                                </View>
                                                : null}


                                            {item.IsSelected == true ?
                                                <View style={{ flexDirection: 'row', }}>
                                                    <View style={{ width: '75%', backgroundColor: '#f0f0f0', height: 35, justifyContent: 'center' }}>
                                                    </View>
                                                    <View style={{ width: '25%', backgroundColor: '#d2d2d2', justifyContent: 'center', paddingRight: 20 }}>

                                                        <Text style={{ color: '#606060', fontFamily: 'Montserrat-Bold', fontSize: 16, textAlign: 'right' }}>{item.Price}</Text>
                                                    </View>
                                                </View>
                                                : null}
                                        </View>
                                    )
                                }} />
                        </View>
                        :
                        <View style={{ width: '100%', height: '75%', justifyContent: 'center', alignItems: 'center', backgroundColor: 'white' }}>
                            <Text style={{ color: '#68bcbc', fontSize: 16, fontFamily: 'Montserrat-Bold' }}>No Data Found</Text>
                        </View>
                    }
                </View>
                {this.state.contestdetail && (
              <DetailComponent
                detailmodel={this.state.contestdetail}
                encrypted_contest_id={
                  this.state.contestdetailid
                }
                onDismiss={() => {
                  this.closeDetailModal();
                }}
                goinfo={() => {
                    this.goinfo();
                  }}
              />
            )}
            </Container >
        );
    }

}

const mapStateToProps = (state: GlobalAppState) => ({
    requestStatus: state.serviceReducer.requestStatus,
    error: state.serviceReducer.error,
    updateProfileRequestStatus: state.serviceReducer.requestStatus,
    updateProfileResponse: state.serviceReducer.response,
    updateProfileError: state.serviceReducer.error,
    getProfileRequestStatus: state.serviceReducer.requestStatus,
    getProfileResponse: state.serviceReducer.response,
    getProfileError: state.serviceReducer.error,
    serviceKey: state.serviceReducer.serviceKey,
    listeners: state.serviceReducer.listeners
})

export default connect(mapStateToProps)(G_StandingList);